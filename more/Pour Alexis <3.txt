* Le Main instancie maintenant un CodeGenerator et lui passe la table des symboles, la liste des tokens, et le parse tree.

* le CodeGenerator instancie un TemplateEngine qui charge un fichier template LLVM, reçoit les instructions à écrire, 
  au fur et à mesure, gère l'indentation, et renvoie le fichier final sous forme de string.

* Toutes les variables contenues dans la table des symboles sont créées au même moment dans le fichier LLVM
  avec un alloca (regarde le fichier main.ll généré, du code vaut mieux que de belles paroles... parfois... je suppose).

* L'idée est d'implémenter une méthode par variable de la grammaire dans CodeGenerator, afin de définir le comportement du CodeGenerator
  en fonction de la variable courante. Je n'ai fait que quelques méthodes pour l'instant. En fait c'est une sorte de recursive descent code generator.

* Pour le "assign", j'ai imaginé qu'il y aura une longue série d'instructions LLVM, où la dernière sera du type: store i32 %48, i32* %a,
  où %48 est un nom de variable temporaire renvoyé par d'autres méthodes. Pourquoi ?
  Dans le méthode generateFromAssign, il n'est pas possible de savoir à l'avance le nom de la variable temporaire dont on assigne la valeur à %a.
  Par contre, on peut faire en sorte qu'il soit renvoyé par generateFromExprArithP0, et étendre le raisonnement de manière récursive.
