<Program>           -> begin <Code> end 
<Code>              -> epsilon 
<Code>              -> <InstList> 
<InstList>          -> <Instruction> 
<InstList>          -> <Instruction> ; <InstList> 
<Instruction>       -> <Assign> 
<Instruction>       -> <If> 
<Instruction>       -> <While> 
<Instruction>       -> <For> 
<Instruction>       -> <Print> 
<Instruction>       -> <Read> 
<Assign>            -> [VarName] := <ExprArith-p0> 
<ExprArith-p2>      -> [VarName] 
<ExprArith-p2>      -> [Number] 
<ExprArith-p2>      -> ( <ExprArith-p2> ) 
<ExprArith-p2>      -> - <ExprArith-p2> 
<ExprArith-p0>      -> <ExprArith-p0> <Op-p0> <ExprArith-p1> 
<ExprArith-p0>      -> <ExprArith-p1>
<ExprArith-p1>      -> <ExprArith-p1> <Op-p1> <ExprArith-p2> 
<ExprArith-p1>      -> <ExprArith-p2>
<Op-p0>             -> + 
<Op-p0>             -> - 
<Op-p1>             -> * 
<Op-p1>             -> / 
<Cond-p0>           -> <Cond-p0> <BinOp-p0> <Cond-p1> 
<Cond-p0>           -> <Cond-p1>
<Cond-p1>           -> <Cond-p1> <BinOp-p1> <Cond-p2> 
<Cond-p1>           -> <Cond-p2>
<Cond-p2>           -> not <SimpleCond> 
<Cond-p2>           -> <SimpleCond> 
<SimpleCond>        -> <ExprArith-p0> <Comp> <ExprArith-p0> 
<BinOp-p1>          -> and 
<BinOp-p0>          -> or 
<Comp>              -> = 
<Comp>              -> >= 
<Comp>              -> > 
<Comp>              -> <= 
<Comp>              -> < 
<Comp>              -> <> 
<While>             -> while <Cond-p0> do <Code> done 
<Print>             -> print ( [VarName] ) 
<Read>              -> read ( [VarName] ) 
<If>                -> if <Cond-p0> then <Code> <If-Tail> 
<If-Tail>           -> else <Code> endif 
<If-Tail>           -> endif 
<For>               -> for [VarName] from <ExprArith-p0> <For-Tail> 
<For-Tail>          -> by <ExprArith-p0> to <ExprArith-p0> do <Code> done 
<For-Tail>          -> to <ExprArith-p0> do <Code> done 