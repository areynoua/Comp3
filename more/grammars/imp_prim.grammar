<Program>           -> begin <Code> end 
<Code>              -> <InstList> 
<InstList>          -> <Instruction> 
                    -> <Instruction> ; <InstList> 
                    -> epsilon 
<FuncInstList>      -> <FuncInstruction> 
                    -> <FuncInstruction> ; <FuncInstList> 
                    -> epsilon 
<Instruction>       -> <Define> 
                    -> <Import>
                    -> <FuncInstruction> 
<FuncInstruction>   -> <Assign> 
                    -> <If> 
                    -> <While> 
                    -> <For> 
                    -> <Print>
                    -> <Read>
                    -> <Rand> 
                    -> <Return>
                    -> <Call>
<Define>            -> function [FuncName] ( <ParamList> ) do <FuncInstList> end
<Return>            -> return <ExprArith-p0>
<Import>            -> import [ModuleName]
<Call>              -> [FuncName] ( <ArgList> )
<ArgList>           -> <ExprArith-p0> , <ArgList>
                    -> <ExprArith-p0>
                    -> epsilon
<ParamList>         -> [VarName] , <ParamList>
                    -> [VarName]
                    -> epsilon
<Assign>            -> [VarName] := <ExprArith-p0>
                    -> [VarName] := <Call>
<ExprArith-p0>      -> <ExprArith-p0> <Op-p0> <ExprArith-p1> 
                    -> <ExprArith-p1>
<ExprArith-p1>      -> <ExprArith-p1> <Op-p1> <Atom>
                    -> <Atom>
<Atom>              -> [VarName] 
                    -> [Number] 
                    -> ( <ExprArith-p0> ) 
                    -> - <Atom> 
<Op-p0>             -> + 
                    -> - 
<Op-p1>             -> * 
                    -> / 
<Cond-p0>           -> <Cond-p0> or <Cond-p1> 
                    -> <Cond-p1>
<Cond-p1>           -> <Cond-p1> and <Cond-p2> 
                    -> <Cond-p2>
<Cond-p2>           -> not <SimpleCond> 
                    -> <SimpleCond> 
<SimpleCond>        -> <ExprArith-p0> <Comp> <ExprArith-p0> 
<Comp>              -> = 
                    -> >= 
                    -> > 
                    -> <= 
                    -> < 
                    -> <> 
<While>             -> while <Cond-p0> do <FuncInstList> done 
<If>                -> if <Cond-p0> then <FuncInstList> else <FuncInstList> endif 
                    -> if <Cond-p0> then <FuncInstList> endif 
<For>               -> for [VarName] from <ExprArith-p0> by <ExprArith-p0> to <ExprArith-p0> do <FuncInstList> done 
                    -> for [VarName] from <ExprArith-p0> to <ExprArith-p0> do <FuncInstList> done 
<Print>             -> print ( [VarName] )
<Read>              -> read ( [VarName] )
<Rand>              -> rand ( [VarName] )
