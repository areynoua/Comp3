<Program>           -> begin <Code> end 
<Code>              -> <InstList> 
<InstList>          -> <Instruction> 
                    -> <Instruction> ; <InstList> 
                    -> epsilon 
<FuncInstList>      -> <FuncInstruction> 
                    -> <FuncInstruction> ; <FuncInstList> 
                    -> epsilon 
<Instruction>       -> <Define> 
                    -> <FuncInstruction> 
<FuncInstruction>   -> <Assign> 
                    -> <If> 
                    -> <While> 
                    -> <For> 
                    -> <Print> 
                    -> <Read> 
                    -> <Rand> 
                    -> <Return> 
                    -> <Call> 
                    -> <Import> 
<Define>            -> function [FuncName] ( <ParamList> ) do <FuncInstList> end 
<Return>            -> return <ExprArith> 
<Call>              -> [FuncName] ( <ArgList> ) 
<ArgList>           -> <ExprArith> , <ArgList> 
                    -> <ExprArith> 
                    -> epsilon 
<ParamList>         -> [VarName] , <ParamList> 
                    -> [VarName] 
                    -> epsilon 
<Import>            -> import [ModuleName] 
<Assign>            -> [VarName] := <ExprArith> 
                    -> [VarName] := <Call> 
<ExprArith>         -> [VarName] 
                    -> [Number] 
                    -> ( <ExprArith> ) 
                    -> - <ExprArith> 
                    -> <ExprArith> <Op> <ExprArith> 
<Op>                -> + 
                    -> - 
                    -> * 
                    -> / 
<If>                -> if <Cond> then <FuncInstList> endif 
                    -> if <Cond> then <FuncInstList> else <FuncInstList> endif 
<Cond>              -> <Cond> <BinOp> <Cond> 
                    -> not <SimpleCond> 
                    -> <SimpleCond> 
<SimpleCond>        -> <ExprArith> <Comp> <ExprArith> 
<BinOp>             -> and 
                    -> or 
<Comp>              -> = 
                    -> >= 
                    -> > 
                    -> <= 
                    -> < 
                    -> <> 
<While>             -> while <Cond> do <FuncInstList> done 
<For>               -> for [VarName] from <ExprArith> by <ExprArith> to <ExprArith> do <FuncInstList> done 
                    -> for [VarName] from <ExprArith> to <ExprArith> do <FuncInstList> done 
<Print>             -> print ( [VarName] ) 
<Read>              -> read ( [VarName] ) 
<Rand>              -> rand ( [VarName] ) 
