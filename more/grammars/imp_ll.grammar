<Program>           -> begin <Code> end 
<Code>              -> epsilon 
                    -> <InstList> 
<Instruction>       -> <Assign> 
                    -> <If> 
                    -> <While> 
                    -> <For> 
                    -> <Print> 
                    -> <Read> 
                    -> <Rand> 
                    -> <Define> 
                    -> <Return> 
                    -> <Call> 
                    -> <Import> 
<Define>            -> function [FuncName] ( [VarName] ) do <Code> end 
<Return>            -> return <ExprArith-p0> 
<Import>            -> import [ModuleName] 
<Call>              -> [FuncName] ( <ExprArith-p0> ) 
<Assign>            -> [VarName] := <ExprArith-p0> 
<ExprArith-p0-j>    -> <Op-p0> <ExprArith-p1> 
<ExprArith-p0-i>    -> <ExprArith-p1> 
<ExprArith-p1-j>    -> <Op-p1> <Atom> 
<ExprArith-p1-i>    -> <Atom> 
<Atom>              -> [VarName] 
                    -> [Number] 
                    -> ( <ExprArith-p0> ) 
                    -> - <Atom> 
<Op-p0>             -> + 
                    -> - 
<Op-p1>             -> * 
                    -> / 
<Cond-p0-j>         -> or <Cond-p1> 
<Cond-p0-i>         -> <Cond-p1> 
<Cond-p1-j>         -> and <Cond-p2> 
<Cond-p1-i>         -> <Cond-p2> 
<Cond-p2>           -> not <SimpleCond> 
                    -> <SimpleCond> 
<SimpleCond>        -> <ExprArith-p0> <Comp> <ExprArith-p0> 
<Comp>              -> = 
                    -> >= 
                    -> > 
                    -> <= 
                    -> < 
                    -> <> 
<While>             -> while <Cond-p0> do <Code> done 
<Print>             -> print ( [VarName] ) 
<Read>              -> read ( [VarName] ) 
<Rand>              -> rand ( [VarName] ) 
<InstList>          -> <Instruction> <InstList-Tail> 
<InstList-Tail>     -> ; <InstList> 
                    -> epsilon 
<If>                -> if <Cond-p0> then <Code> <If-Tail> 
<If-Tail>           -> endif 
                    -> else <Code> endif 
<For>               -> for [VarName] from <ExprArith-p0> <For-Tail> 
<For-Tail>          -> to <ExprArith-p0> do <Code> done 
                    -> by <ExprArith-p0> to <ExprArith-p0> do <Code> done 
<ExprArith-p0>      -> <ExprArith-p0-i> <ExprArith-p0-j> 
<ExprArith-p0-j>    -> epsilon 
<ExprArith-p1>      -> <ExprArith-p1-i> <ExprArith-p1-j> 
<ExprArith-p1-j>    -> epsilon 
<Cond-p0>           -> <Cond-p0-i> <Cond-p0-j> 
<Cond-p0-j>         -> epsilon 
<Cond-p1>           -> <Cond-p1-i> <Cond-p1-j> 
<Cond-p1-j>         -> epsilon 
